clear;
clc;
disp("--------------Example 30.9----------------")
p=9613034531358350457419158128061542790930984559499621582258315087964794045505647063849125716018034750312098666606492420191808780667421096063354219926661209; // 159 digit number
q=12060191957231446918276794204450896001555925054637033936061798321731482148483764659215389453209175225273226830107120695604602513887145524969000359660045617; // 160 digit number
n=p*q; // formula
phi=(p-1)*(q-1);// formula
e=35535;
d="580083028600377639360936612896779175946690620896509621804228661113805938528223587317062869100300217108590443384021707298690876006115306202524959884448047568240966247081485817130463240644077704833134010850947385295645071936774061197326557424237217617674620776371642076003370853332885321447088955136670294831"; // compute d such that d*e = 1 mod n ( very huge value to compute)
alphabet=['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' ' '];
p_str="9613034531358350457419158128061542790930984559499621582258315087964794045505647063849125716018034750312098666606492420191808780667421096063354219926661209";
q_str="12060191957231446918276794204450896001555925054637033936061798321731482148483764659215389453209175225273226830107120695604602513887145524969000359660045617";
n_str="11593504I739676149688925098646158875237714573754541447754855261376147885408326350817276878815968325168468849300625485764111250162414552339182927162507656772727460097082714127730434960500556347274566628060099924037102991424472292215772798531727033839381334692684137327622000966676671831831088373420823444370953"; // 309 digits
phi_str="115935041739676149688925098646158875237714573754541447754855261376147885408326350817276878815968325168468849300625485764111250162414552339182927162507656751054233608492916752034482627988117554787657013923444405716989581728196098226361075467211864612171359107358640614008885170265377271264467341066243857664128"; // 309 digits
// encoding by Alice
message=["T" "H" "I" "S" " " "I" "S" " " "A" " " "T" "E" "S" "T"]; //THIS IS A TEST
l=size(message,'c'); // length of the message
c=[];
plaintext="";
for k=1:l // determine the code for each character in the message
    for i=1:27
        if(message(k)==alphabet(i))
            c(k)=string(i-1);  // compute the code
            if(length(c(k))==1)
                c(k)='0'+c(k);
            end
            break;
        end
    end
end
for i=1:l
    plaintext=plaintext+c(i); // form the plaintext , code 26 is for space
end
P=plaintext;
C="47530912364622682720636555061054518094237179607049171652323924305445296061319932856661784341835911415119741125200568297979457173603610127821884789274156609048002350719071527718591497518846588863210114835410336165789846796838676373376577746562507928052114814184404814184430812773059004692874248559166462108656"; // C= P^e -- ciphertext ( very huge value to compute)
printf("p = %s\n\nq = %s\n\nn = %s\n\nphi = %s\n\ne = %d\n\nd = %s\n\n",p_str,q_str,n_str,phi_str,e,d);
printf("The plaintext is %s and the ciphertext sent by Alice is\nC = %s\n\n",P,C);
// Decoding by Bob
P="1907081826081826002619041819"; // P=C^d -- plaintext (very huge to compute)
d_message=""; 
c=strsplit(P,[2 4 6 8 10 12 14 16 18 20 22 24 26]); // separate the codes for each character
for k=1:l // find the corresponding letter for each code
    for i=1:27
        a=string(i-1);
        b=strsplit(c(k));
        if(b(1)=='0')
            c(k)=b(2);
        end
        if(a==c(k))
            d_message=d_message+alphabet(i);  // form the deciphered message
            break;
        end
    end
end
printf("\nBob recovers the plaintext %s and decodes it as the message %s.",P,d_message);